// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: friends.sql

package db

import (
	"context"
)

const createFriendship = `-- name: CreateFriendship :one
INSERT INTO friends ( 
    chat_id,
    friend_id
) VALUES (
    $1, $2
) RETURNING chat_id, friend_id, status, created_at
`

type CreateFriendshipParams struct {
	ChatID   int64 `json:"chat_id"`
	FriendID int64 `json:"friend_id"`
}

func (q *Queries) CreateFriendship(ctx context.Context, arg CreateFriendshipParams) (Friend, error) {
	row := q.db.QueryRow(ctx, createFriendship, arg.ChatID, arg.FriendID)
	var i Friend
	err := row.Scan(
		&i.ChatID,
		&i.FriendID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFriendship = `-- name: DeleteFriendship :exec
DELETE FROM friends
WHERE chat_id = $1 AND friend_id = $2
`

type DeleteFriendshipParams struct {
	ChatID   int64 `json:"chat_id"`
	FriendID int64 `json:"friend_id"`
}

func (q *Queries) DeleteFriendship(ctx context.Context, arg DeleteFriendshipParams) error {
	_, err := q.db.Exec(ctx, deleteFriendship, arg.ChatID, arg.FriendID)
	return err
}

const getAprovedFriendships = `-- name: GetAprovedFriendships :many
SELECT u.username, f.friend_id
FROM friends f
JOIN users u ON u.chat_id = f.friend_id
JOIN dim_friend_status d ON d.id = f.status
WHERE f.chat_id = $1 AND f.status = 1
`

type GetAprovedFriendshipsRow struct {
	Username string `json:"username"`
	FriendID int64  `json:"friend_id"`
}

func (q *Queries) GetAprovedFriendships(ctx context.Context, chatID int64) ([]GetAprovedFriendshipsRow, error) {
	rows, err := q.db.Query(ctx, getAprovedFriendships, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAprovedFriendshipsRow{}
	for rows.Next() {
		var i GetAprovedFriendshipsRow
		if err := rows.Scan(&i.Username, &i.FriendID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendship = `-- name: GetFriendship :one
SELECT chat_id, friend_id, status, created_at FROM friends
WHERE chat_id = $1 AND friend_id = $2 LIMIT 1
`

type GetFriendshipParams struct {
	ChatID   int64 `json:"chat_id"`
	FriendID int64 `json:"friend_id"`
}

func (q *Queries) GetFriendship(ctx context.Context, arg GetFriendshipParams) (Friend, error) {
	row := q.db.QueryRow(ctx, getFriendship, arg.ChatID, arg.FriendID)
	var i Friend
	err := row.Scan(
		&i.ChatID,
		&i.FriendID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getPendingFriendships = `-- name: GetPendingFriendships :many
SELECT u.username, f.friend_id, d.status_name, f.chat_id
FROM friends f
JOIN users u ON u.chat_id = f.friend_id
JOIN dim_friend_status d ON d.id = f.status
WHERE f.chat_id = $1 OR f.friend_id = $1 AND f.status != 1
`

type GetPendingFriendshipsRow struct {
	Username   string `json:"username"`
	FriendID   int64  `json:"friend_id"`
	StatusName string `json:"status_name"`
	ChatID     int64  `json:"chat_id"`
}

func (q *Queries) GetPendingFriendships(ctx context.Context, chatID int64) ([]GetPendingFriendshipsRow, error) {
	rows, err := q.db.Query(ctx, getPendingFriendships, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPendingFriendshipsRow{}
	for rows.Next() {
		var i GetPendingFriendshipsRow
		if err := rows.Scan(
			&i.Username,
			&i.FriendID,
			&i.StatusName,
			&i.ChatID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFriendshipStatus = `-- name: UpdateFriendshipStatus :one
UPDATE friends
SET status = $1
WHERE chat_id = $2 AND friend_id = $3
RETURNING chat_id, friend_id, status, created_at
`

type UpdateFriendshipStatusParams struct {
	Status   int32 `json:"status"`
	ChatID   int64 `json:"chat_id"`
	FriendID int64 `json:"friend_id"`
}

func (q *Queries) UpdateFriendshipStatus(ctx context.Context, arg UpdateFriendshipStatusParams) (Friend, error) {
	row := q.db.QueryRow(ctx, updateFriendshipStatus, arg.Status, arg.ChatID, arg.FriendID)
	var i Friend
	err := row.Scan(
		&i.ChatID,
		&i.FriendID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
