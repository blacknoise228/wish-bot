// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, 
    chat_id
) VALUES (
    $1, $2
) RETURNING username, chat_id, created_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	ChatID   int64  `json:"chat_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.ChatID)
	var i User
	err := row.Scan(&i.Username, &i.ChatID, &i.CreatedAt)
	return i, err
}

const createUserInfo = `-- name: CreateUserInfo :exec
INSERT INTO user_info (
    chat_id,
    address,
    phone,
    name,
    description
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreateUserInfoParams struct {
	ChatID      int64  `json:"chat_id"`
	Address     string `json:"address"`
	Phone       string `json:"phone"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateUserInfo(ctx context.Context, arg CreateUserInfoParams) error {
	_, err := q.db.Exec(ctx, createUserInfo,
		arg.ChatID,
		arg.Address,
		arg.Phone,
		arg.Name,
		arg.Description,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE chat_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, chatID int64) error {
	_, err := q.db.Exec(ctx, deleteUser, chatID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, chat_id, created_at FROM users
WHERE chat_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, chatID int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, chatID)
	var i User
	err := row.Scan(&i.Username, &i.ChatID, &i.CreatedAt)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT username, chat_id, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(&i.Username, &i.ChatID, &i.CreatedAt)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $1
WHERE chat_id = $2
RETURNING username, chat_id, created_at
`

type UpdateUserParams struct {
	Username string `json:"username"`
	ChatID   int64  `json:"chat_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Username, arg.ChatID)
	var i User
	err := row.Scan(&i.Username, &i.ChatID, &i.CreatedAt)
	return i, err
}

const updateUserInfoAddress = `-- name: UpdateUserInfoAddress :exec
UPDATE user_info 
SET address = $1
WHERE chat_id = $2
`

type UpdateUserInfoAddressParams struct {
	Address string `json:"address"`
	ChatID  int64  `json:"chat_id"`
}

func (q *Queries) UpdateUserInfoAddress(ctx context.Context, arg UpdateUserInfoAddressParams) error {
	_, err := q.db.Exec(ctx, updateUserInfoAddress, arg.Address, arg.ChatID)
	return err
}

const updateUserInfoDescription = `-- name: UpdateUserInfoDescription :exec
UPDATE user_info 
SET description = $1
WHERE chat_id = $2
`

type UpdateUserInfoDescriptionParams struct {
	Description string `json:"description"`
	ChatID      int64  `json:"chat_id"`
}

func (q *Queries) UpdateUserInfoDescription(ctx context.Context, arg UpdateUserInfoDescriptionParams) error {
	_, err := q.db.Exec(ctx, updateUserInfoDescription, arg.Description, arg.ChatID)
	return err
}

const updateUserInfoName = `-- name: UpdateUserInfoName :exec
UPDATE user_info 
SET name = $1
WHERE chat_id = $2
`

type UpdateUserInfoNameParams struct {
	Name   string `json:"name"`
	ChatID int64  `json:"chat_id"`
}

func (q *Queries) UpdateUserInfoName(ctx context.Context, arg UpdateUserInfoNameParams) error {
	_, err := q.db.Exec(ctx, updateUserInfoName, arg.Name, arg.ChatID)
	return err
}

const updateUserInfoPhone = `-- name: UpdateUserInfoPhone :exec
UPDATE user_info 
SET phone = $1
WHERE chat_id = $2
`

type UpdateUserInfoPhoneParams struct {
	Phone  string `json:"phone"`
	ChatID int64  `json:"chat_id"`
}

func (q *Queries) UpdateUserInfoPhone(ctx context.Context, arg UpdateUserInfoPhoneParams) error {
	_, err := q.db.Exec(ctx, updateUserInfoPhone, arg.Phone, arg.ChatID)
	return err
}
