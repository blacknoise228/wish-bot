// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, price, description, image, category_id, status, shop_id, admin_id, created_at, updated_at FROM product
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.Image,
		&i.CategoryID,
		&i.Status,
		&i.ShopID,
		&i.AdminID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT id, name, price, description, image, category_id, status, shop_id, admin_id, created_at, updated_at FROM product
WHERE category_id = $1
`

func (q *Queries) GetProductsByCategory(ctx context.Context, categoryID int32) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Description,
			&i.Image,
			&i.CategoryID,
			&i.Status,
			&i.ShopID,
			&i.AdminID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
