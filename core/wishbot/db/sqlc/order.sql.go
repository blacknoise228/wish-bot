// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    price,
    status,
    customer_id,
    customer_login,
    consignee_id,
    product_id,
    admin_id,
    shop_id
) VALUES (
$1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, price, status, customer_id, customer_login, consignee_id, product_id, admin_id, shop_id, created_at, updated_at
`

type CreateOrderParams struct {
	Price         float64   `json:"price"`
	Status        int32     `json:"status"`
	CustomerID    int64     `json:"customer_id"`
	CustomerLogin string    `json:"customer_login"`
	ConsigneeID   int64     `json:"consignee_id"`
	ProductID     uuid.UUID `json:"product_id"`
	AdminID       int64     `json:"admin_id"`
	ShopID        uuid.UUID `json:"shop_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.Price,
		arg.Status,
		arg.CustomerID,
		arg.CustomerLogin,
		arg.ConsigneeID,
		arg.ProductID,
		arg.AdminID,
		arg.ShopID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Status,
		&i.CustomerID,
		&i.CustomerLogin,
		&i.ConsigneeID,
		&i.ProductID,
		&i.AdminID,
		&i.ShopID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDimOrderStatusByID = `-- name: GetDimOrderStatusByID :one
SELECT id, status_code, status_name FROM dim_order_status
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDimOrderStatusByID(ctx context.Context, id int32) (DimOrderStatus, error) {
	row := q.db.QueryRow(ctx, getDimOrderStatusByID, id)
	var i DimOrderStatus
	err := row.Scan(&i.ID, &i.StatusCode, &i.StatusName)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, price, status, customer_id, customer_login, consignee_id, product_id, admin_id, shop_id, created_at, updated_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Status,
		&i.CustomerID,
		&i.CustomerLogin,
		&i.ConsigneeID,
		&i.ProductID,
		&i.AdminID,
		&i.ShopID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrdersByCustomer = `-- name: GetOrdersByCustomer :many
SELECT id, price, status, customer_id, customer_login, consignee_id, product_id, admin_id, shop_id, created_at, updated_at FROM orders
WHERE customer_id = $1
`

func (q *Queries) GetOrdersByCustomer(ctx context.Context, customerID int64) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Status,
			&i.CustomerID,
			&i.CustomerLogin,
			&i.ConsigneeID,
			&i.ProductID,
			&i.AdminID,
			&i.ShopID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomAdminByShopID = `-- name: GetRandomAdminByShopID :one
SELECT admin_id, shop_id FROM shop_admins
WHERE shop_id = $1
ORDER BY random()
LIMIT 1
`

func (q *Queries) GetRandomAdminByShopID(ctx context.Context, shopID uuid.UUID) (ShopAdmin, error) {
	row := q.db.QueryRow(ctx, getRandomAdminByShopID, shopID)
	var i ShopAdmin
	err := row.Scan(&i.AdminID, &i.ShopID)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET 
status = $3,
updated_at = now()
WHERE customer_id = $2 and id = $1
RETURNING id, price, status, customer_id, customer_login, consignee_id, product_id, admin_id, shop_id, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID         uuid.UUID `json:"id"`
	CustomerID int64     `json:"customer_id"`
	Status     int32     `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.ID, arg.CustomerID, arg.Status)
	return err
}
